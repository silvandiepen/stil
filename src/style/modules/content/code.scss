@function code-hsl($hue) {
  @return hsl(#{$hue}, calc(#{value(current-saturation)} * 1%), calc(#{value(negative-lightness)} * 1%));
}

@mixin styled-code() {
  @if export($output, "content.code.prism") {
    /**
 * Dracula Theme originally by Zeno Rocha [@zenorocha]
 * https://draculatheme.com/
 *
 * Ported for PrismJS by Albert Vallverdu [@byverdu]
 */

  


    // :not([class*="language-"]) code:not([class*="language-"]) {
    //   font-family: value(code-font);
    //   line-height: value(line-height);
    //   font-size: 0.875em;
    //   z-index: 1;
    //   background-color: value(accent);
    //   border-radius: value(border-radius);
    //   padding: 0.5em;
    //   display: inline-block;
    // }

    // [class*="language-"],
    // code[class*="language-"],
    // pre[class*="language-"] {
    //   color: inherit;
    //   font-family: value(code-font);
    //   text-align: left;
    //   white-space: pre;
    //   word-spacing: normal;
    //   word-break: normal;
    //   word-wrap: normal;
    //   line-height: value(line-height);
    //   tab-size: 4;
    //   hyphens: none;
    // }
    // pre[class*="language-"]{
    //   background: value(background-accent);
    //   border-radius: value(border-radius);
    //   padding: value(space);
    // }

    // /* Code blocks */
    // [class*="language-"] pre {
    //   padding: value(space);
    //   overflow: auto;
    //   border-radius: value(border-radius);
    // }

    // [class*="language-"] :not(pre) > code,
    // [class*="language-"] pre {
    //   background: value(background-accent);
    // }

    // /* Inline code */
    // [class*="language-"] :not(pre) > code {
    //   padding: 0.1em;
    //   border-radius: value(border-radius);
    //   white-space: normal;
    // }

    // :root{
    //   --code-group-comment: red;
    //   --code-group-punctuation: red;
    //   --code-group-property: red;
    //   --code-group-boolean: red;
    //   --code-group-selector: red;
    //   --code-group-operator: red;
    //   --code-group-atrule: red;
    //   --code-group-keyword: red;
    //   --code-group-regex: red;
    // }

    $code-tokens: ('comment', 'prolog', doctype, cdata, punctuation, property, tag,constant,symbol,deleted,boolean,number,selector,attr-name, string,char,builtin,inserted,operator,entity,url,variable,atrule,attr-value,function,class-name,keyword,regex,important);


    @each $el in $code-tokens {
      .token.#{$el}{ color: value(code-#{$el}); }
    }

    .token.comment,
    .token.prolog,
    .token.doctype,
    .token.cdata {
      color: value(code-comment, var(--code-group-comment, code-hsl(100)));
    }

    .token.punctuation {
      color:value(code-punctuation,var(--code-group-punctuation,code-hsl(100)));
    }

    .namespace {
      opacity: 0.7;
    }

    .token.property,
    .token.tag,
    .token.constant,
    .token.symbol,
    .token.deleted {
      color: value(code-property,var(--code-group-property,code-hsl(10)));
    }

    .token.boolean,
    .token.number {
      color: value(code-boolean,var(--code-group-boolean,code-hsl(180)));
    }

    .token.selector,
    .token.attr-name,
    .token.string,
    .token.char,
    .token.builtin,
    .token.inserted {
      color: value(code-selector, var(--code-group-selector,code-hsl(220)));
    }

    .token.operator,
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string,
    .token.variable {
      color: value(code-variable,var(--code-group-operator,code-hsl(200)));
    }

    .token.atrule,
    .token.attr-value,
    .token.function,
    .token.class-name {
      color: value(code-function,var(--code-group-atrule,code-hsl(140)));
    }

    .token.keyword {
      color: value(code-keyword,var(--code-group-keyword,code-hsl(40)));
    }

    .token.regex,
    .token.important {
      color: value(code-regex,var(--code-group-regex,code-hsl(40)));
    }

    .token.important,
    .token.bold {
      font-weight: bold;
    }

    .token.italic {
      font-style: italic;
    }

    .token.entity {
      cursor: help;
    }
  }
}
